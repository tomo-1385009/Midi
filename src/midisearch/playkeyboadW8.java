/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * MidiSearchFrame.java
 *
 * Created on 2011/11/24, 20:20:05
 */
package midisearch;

import quicktime.*;
import quicktime.app.time.*;
import quicktime.io.*;
import quicktime.std.*;
import quicktime.std.movies.*;

import java.io.*;
import java.util.HashMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Map;
import java.util.List;
import java.util.Comparator;
import javax.sound.midi.*;

/**
 *
 * @author takanolab
 */
public class playkeyboadW8 extends javax.swing.JFrame {

    Movie movie = null;
    SimpleResultsTableModel tableModel = new SimpleResultsTableModel();
    private EditDistance editDistance = new EditDistance();

    /** Creates new form MidiSearchFrame */
    public playkeyboadW8() {
        initComponents();
        init();
    }

    public void init() {
        jTableResult.setModel(tableModel);
//        tableModel.addRow(new SimpleResultsTableRow("italco", "italco.mid"));
//        tableModel.addRow(new SimpleResultsTableRow("Nocturne No.2", "noct_2.mid"));
//        tableModel.addRow(new SimpleResultsTableRow("Piano Concerto No.2", "con2_1.mid"));
        new MidiKeyboardW();

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableResult = new javax.swing.JTable();
        jButtonPlay = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();
        jTextFieldInput = new javax.swing.JTextField();
        jButtonSearch = new javax.swing.JButton();
        jButtonClear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableInput = new javax.swing.JTable();
        jTextResult = new javax.swing.JTextField();
        txtclose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableResult);

        jButtonPlay.setText("Play");
        jButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayActionPerformed(evt);
            }
        });

        jButtonStop.setText("Stop");
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });

        jTextFieldInput.setEditable(false);
        jTextFieldInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldInputActionPerformed(evt);
            }
        });

        jButtonSearch.setText("Search");
        jButtonSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSearchActionPerformed(evt);
            }
        });

        jButtonClear.setText("Clear");
        jButtonClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClearActionPerformed(evt);
            }
        });

        jTableInput.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "IN"
            }
        ));
        jScrollPane2.setViewportView(jTableInput);

        jTextResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextResultActionPerformed(evt);
            }
        });

        txtclose.setText("close");
        txtclose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcloseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addComponent(jButtonPlay)
                .addGap(169, 169, 169)
                .addComponent(jButtonStop)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(txtclose)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextFieldInput, javax.swing.GroupLayout.DEFAULT_SIZE, 478, Short.MAX_VALUE)
                                .addComponent(jTextResult))
                            .addGap(10, 10, 10)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jButtonSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButtonClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonClear))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonSearch)
                    .addComponent(jTextResult, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtclose)
                .addGap(428, 428, 428)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonPlay)
                    .addComponent(jButtonStop))
                .addContainerGap(134, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSearchActionPerformed
        // TODO add your handling code here:
        String inputnotes = jTextFieldInput.getText();
        String [] notes = inputnotes.split(" ");
          
    }//GEN-LAST:event_jButtonSearchActionPerformed

    private void jButtonClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClearActionPerformed
        // TODO add your handling code here:
        jTextFieldInput.setText("");
        
        // 検索結果も削除
    }//GEN-LAST:event_jButtonClearActionPerformed

    private void jTextFieldInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldInputActionPerformed

    private void jTextResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextResultActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextResultActionPerformed

    private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayActionPerformed
// TODO add your handling code here:
        try {
            QTSessionCheck.check();
            String title = "";
            int row = jTableResult.getSelectedRow();
            if (jTableResult.getSelectedRow() > -1) {

                if (movie != null) {
                    movie.stop();
                }

                title = (String) jTableResult.getValueAt(jTableResult.getSelectedRow(), 1);
                String fileName = "midi\\" + title + ".mid";
                System.out.println(fileName);
                QTFile f = new QTFile(new File(fileName));
                OpenMovieFile omf = OpenMovieFile.asRead(f);
                movie = Movie.fromFile(omf);
                TaskAllMovies.addMovieAndStart();
                movie.start();
            } else {
                System.out.println("Not selected");
            }
        } catch (QTException e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButtonPlayActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
// TODO add your handling code here:
        if (movie != null) {
            try {
                movie.stop();
            } catch (QTException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jButtonStopActionPerformed

    private void txtcloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcloseActionPerformed
        // TODO add your handling code here:
        try{
        String Fileoutputname = "Key_output.txt";
        File file = new File(Fileoutputname);
        FileWriter filewriter = new FileWriter(file);
        
        
        filewriter.close();
    }catch(IOException e){
        System.out.println(e);
    }
    }//GEN-LAST:event_txtcloseActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(playkeyboadW8.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(playkeyboadW8.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(playkeyboadW8.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(playkeyboadW8.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new playkeyboadW8().setVisible(true);
            }
        });
    }
    
    public class MidiKeyboardW implements Receiver
{
    static final int DEVICE_IN  = 1;
    static final int DEVICE_OUT = 2;//ここを修正、私の場合1or2
    private MidiDevice.Info[] info;
    private MidiDevice in_device = null;
    private MidiDevice out_device = null;
    
    int i = 0;
    String[] CtrNum;

    
    
    
    private final String[]	sm_astrKeyNames = {"C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"};
    private final String[]	sm_astrKeySignatures = {"Cb", "Gb", "Db", "Ab", "Eb", "Bb", "F", "C", "G", "D", "A", "E", "B", "F#", "C#"};


    public MidiKeyboardW() {
        info = MidiSystem.getMidiDeviceInfo();
        MidiDevice dev = null;

        try {
            dev = MidiSystem.getMidiDevice(info[DEVICE_IN]);
        } catch (Throwable t) {
        }

        connectMidiIn(dev);

        try {
            dev = MidiSystem.getMidiDevice(info[DEVICE_OUT]);
        } catch (Throwable t) {
        }
        connectMidiOut(dev);

    }

    private void connectMidiIn(MidiDevice device) {

        try {

            device.open();
            Transmitter tx = device.getTransmitter();
            tx.setReceiver(this);
            in_device = device;

        } catch (MidiUnavailableException e) {
            e.printStackTrace();
        }
    }

    private void connectMidiOut(MidiDevice device) {
        try {
            device.open();
            out_device = device;
        } catch (MidiUnavailableException e) {
            e.printStackTrace();
        }
    }

    public void close() {
    }

    public void send(MidiMessage message, long timeStamp) {

        
//        if (message instanceof ShortMessage) {
//            ShortMessage sm = (ShortMessage) message;
//            String query_notes = "";
//            switch (sm.getCommand()) {
//                case ShortMessage.NOTE_ON:
//                    System.out.println(sm.getData1() + " " + getKeyName(sm.getData1()));
//                    query_notes = jTextFieldInput.getText() + " " + getKeyName(sm.getData1());
//                    jTextFieldInput.setText(query_notes);
//                    break;
//                case ShortMessage.NOTE_OFF:
//                    break;
//                default:
//            }
//        }
   
        
    
        if (message instanceof ShortMessage) {
            ShortMessage sm = (ShortMessage) message;
            String strMsg = "";
            CtrNum = new String[i];
            
            //System.out.println(sm.getCommand());
            String on;
            switch (sm.getCommand()) {
                case ShortMessage.NOTE_ON:
                    strMsg = "note On " + getKeyName(sm.getData1()) + " velocity: " + sm.getData2();
                    //System.out.println(sm.getData1() + " ");
                    try{
        String Fileoutputname = "Key_output.txt";
        File file = new File(Fileoutputname);
        FileWriter filewriter = new FileWriter(file);
        
        filewriter.write(strMsg + "\r\n");
        
        filewriter.close();
    }catch(IOException e){
        System.out.println(e);
    }
                    System.out.println(strMsg);
//                    filewriter.write(strMsg + "\r\n");
                    strMsg = jTextFieldInput.getText() +"note On " + getKeyName(sm.getData1()) + " velocity: " + sm.getData2() + " ";
                    jTextFieldInput.setText(strMsg);
                    break;
                //case ShortMessage.NOTE_OFF:
                //break;ｓ
                case 0xb0:
                    strMsg = "control change :" + sm.getData1() + " value: " + sm.getData2();
                    System.out.println(strMsg);
                    strMsg =jTextFieldInput.getText() + "control change :" + sm.getData1() + " value: " + sm.getData2();
                    jTextFieldInput.setText(strMsg);
                    break;
                case 0xd0:
                    strMsg = "key pressure " + getKeyName(sm.getData1()) + " pressure: " + sm.getData2();
                    System.out.println(strMsg);
                    strMsg =jTextFieldInput.getText() + "key pressure " + getKeyName(sm.getData1()) + " pressure: " + sm.getData2();
                    jTextFieldInput.setText(strMsg);
                    break;

                case 0xe0:
                    strMsg = "pitch wheel change " + get14bitValue(sm.getData1(), sm.getData2()) + " ";
                    strMsg =jTextFieldInput.getText() + "pitch wheel change " + get14bitValue(sm.getData1(), sm.getData2()) + " ";
                    System.out.println(strMsg);
                    jTextFieldInput.setText(strMsg);
                    break;
                default:
            }

            
        }        

        try {
            out_device.getReceiver().send(message, timeStamp);
        } catch (MidiUnavailableException e) {
        }

   
    }
    
    	public String getKeyName(int nKeyNumber)
	{
		if (nKeyNumber > 127)
		{
			return "illegal value";
		}
		else
		{
			int	nNote = nKeyNumber % 12;
			int	nOctave = nKeyNumber / 12;
			return sm_astrKeyNames[nNote] + (nOctave - 1);
		}
	}
    }
    
        public static int get14bitValue(int nLowerPart, int nHigherPart) {
        return (nLowerPart & 0x7F) | ((nHigherPart & 0x7F) << 7);
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonClear;
    private javax.swing.JButton jButtonPlay;
    private javax.swing.JButton jButtonSearch;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableInput;
    private javax.swing.JTable jTableResult;
    private javax.swing.JTextField jTextFieldInput;
    private javax.swing.JTextField jTextResult;
    private javax.swing.JButton txtclose;
    // End of variables declaration//GEN-END:variables
}
